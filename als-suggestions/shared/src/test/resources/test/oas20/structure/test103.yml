---
swagger: '2.0'
info:
  version: 1.0.9-abcd
  title: Swagger Sample API
host: my.api.com
basePath: "/v1"
schemes:
- http
- https
consumes:
- application/json
produces:
- application/json
- application/xml
paths:
  "/pets/{id}": {}
parameters:
  skipParam:
    name: skip
    in: query
    description: number of items to skip
    required: true
    type: integer
    mimimum: 45
    format: int32
    collectionFormat: csv
definitions:
  Pet:
    title: text
    description: text
    properties:
      name:
        type: string
    required: [ name ]
    discriminator: name
    xml:
      attribute: true # serialize it as an XML attribute
      nam*
      wrapped: true
      namespace: "air"
      prefix: "air"
    externalDocs:
      description: Find more info here
      url: https://swagger.io
    type: object
    allOf:
    - required:
        - name
      properties:
        description:
          type: integer
          format: int64
    required: true
    additionalProperties: true
    additionalPropertiesSchema: Pet
securityDefinitions:
  petstoreImplicit:
    type: oauth2
    scopes:
      user: Grants read/write access to profile info only. Note that this scope includes
        user:email and user:follow.
      user:email: Grants read access to a userâ€™s email addresses.
    flow: implicit
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
  internalApiKey:
    type: apiKey
    in: header
    name: api_key
security:
- githubAccessCode:
  - user
  - gist
- internalApiKey: []
responses:
  r1:
    description: simple string response
    schema:
      type: string
  r2:
    description: oops
    schema:
      type: integer
      format: int32
tags:
- name: pet
  description: Everything you need to handle pets
  externalDocs:
    description: Find more info here
    url: https://swagger.io
- name: pet1
  description: Everything you need to handle pet1s
  externalDocs:
    description: Find more info here
    url: https://swagger.io
externalDocs:
  description: Find more info here
  url: https://swagger.io
x-web-api-annotation: some string value
paths:
  "/pets/{id}":
    parameters:
    - name: id
      in: path
      description: ID of pet to use
      required: true
      type: array
      items:
        type: string
      collectionFormat: csv
    - name: idHeader
      in: header
      description: ID of pet to use
      required: true
      type: array
      items:
        type: string
      collectionFormat: csv
    - "$ref": "#/parameters/skipParam"
    post:
      description: Returns a pet based on ID
      summary: Find pet by ID
      operationId: getPetsById
      tags:
      - foo
      - bar
      produces:
      - application/json
      - text/html
      consumes:
      - application/json
      parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be fetched
        required: true
        type: integer
        format: int64
      - name: petIdHeader
        in: header
        description: ID of pet that needs to be fetched
        required: true
        type: integer
        format: int64
      - "$ref": "#/parameters/limitParam"
      - "$ref": "#/parameters/bodyParam"
      responses:
        '200':
          description: a pet to be returned
          schema:
            "$ref": "#/definitions/Pet"
        default:
          description: Unexpected error
